{"version":3,"sources":["../../../../server/graphql/mutations/task/update.js"],"names":["type","args","token","name","id","data","resolve","root","params","decoded","Error","findByIdAndUpdate","$set","then","findById","exec","catch","err"],"mappings":";;;;;;;;AAAA;;AAKA;;AACA;;;;AACA;;;;kBAEe;AACdA,qBADc;AAEdC,OAAM;AACLC,SAAO;AACNC,SAAM,OADA;AAENH;AAFM,GADF;AAKLI,MAAI;AACHD,SAAM,IADH;AAEHH,SAAM;AAFH,GALC;AASLK,QAAM;AACLF,SAAM,MADD;AAELH,SAAM;AAFD;AATD,EAFQ;AAgBdM,QAhBc,mBAgBNC,IAhBM,EAgBAC,MAhBA,EAgBQ;AACrB,MAAMC,UAAU,wBAAYD,OAAON,KAAnB,CAAhB;AACA,MAAI,CAACO,OAAL,EAAc;AACb,SAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACA;AACD,SAAO,eAAUC,iBAAV,CAA4BH,OAAOJ,EAAnC,EAAuC,EAAEQ,mBAAWJ,OAAOH,IAAlB,CAAF,EAAvC,EACNQ,IADM,CACD;AAAA,UAAQ,eAAUC,QAAV,CAAmBT,KAAKD,EAAxB,EAA4BW,IAA5B,EAAR;AAAA,GADC,EAENC,KAFM,CAEA;AAAA,UAAO,IAAIN,KAAJ,CAAU,8BAAV,EAA0CO,GAA1C,CAAP;AAAA,GAFA,CAAP;AAGA;AAxBa,C","file":"update.js","sourcesContent":["import {\r\n\tGraphQLNonNull,\r\n\tGraphQLID,\r\n\tGraphQLString\r\n} from 'graphql'\r\nimport { taskType, taskInputType } from '../../types/task'\r\nimport TaskModel from '../../../models/task'\r\nimport { verifyToken } from '../../../utils'\r\n\r\nexport default {\r\n\ttype: taskType,\r\n\targs: {\r\n\t\ttoken: {\r\n\t\t\tname: 'token',\r\n\t\t\ttype: GraphQLString\r\n\t\t},\r\n\t\tid: {\r\n\t\t\tname: 'ID',\r\n\t\t\ttype: new GraphQLNonNull(GraphQLID)\r\n\t\t},\r\n\t\tdata: {\r\n\t\t\tname: 'data',\r\n\t\t\ttype: new GraphQLNonNull(taskInputType)\r\n\t\t}\r\n\t},\r\n\tresolve(root, params) {\r\n\t\tconst decoded = verifyToken(params.token)\r\n\t\tif (!decoded) {\r\n\t\t\tthrow new Error('Invalid Token')\r\n\t\t}\r\n\t\treturn TaskModel.findByIdAndUpdate(params.id, { $set: { ...params.data } })\r\n\t\t.then(data => TaskModel.findById(data.id).exec())\r\n\t\t.catch(err => new Error('Couldn\\'t Update Task data, ', err))\r\n\t}\r\n}\r\n"]}