{"version":3,"sources":["../../server/models/user.js"],"names":["Schema","userSchema","email","type","String","required","unique","password","collection","timestamps","pre","next","user","isModified","hash","err","methods","comparePassword","pass","compareSync","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC7BE,QAAO;AACNC,QAAMC,MADA;AAENC,YAAU,IAFJ;AAGNC,UAAQ;AAHF,EADsB;AAM7BC,WAAU;AACRJ,QAAMC,MADE;AAETC,YAAU;AAFD;AANmB,CAAX,EAUhB,EAAEG,YAAY,MAAd,EAAsBC,YAAY,IAAlC,EAVgB,CAAnB;;AAYAR,WAAWS,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACtC,KAAMC,OAAO,IAAb;AACA;AACA,KAAG,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAiC,OAAOF,MAAP;AACjC,wBAAOG,IAAP,CAAYF,KAAKL,QAAjB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,UAAUQ,GAAV,EAAeD,IAAf,EAAqB;AAC3D,MAAGC,GAAH,EAAQ,OAAOJ,KAAKI,GAAL,CAAP;AACRH,OAAKL,QAAL,GAAgBO,IAAhB;AACAH;AACA,EAJD;AAKA,CATD;;AAWAV,WAAWe,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,IAAV,EAAgB;AACpD,KAAMN,OAAO,IAAb;AACA,QAAO,uBAAOO,WAAP,CAAmBD,IAAnB,EAAyBN,KAAKL,QAA9B,CAAP;AACA,CAHD;;kBAKe,mBAASa,KAAT,CAAe,MAAf,EAAuBnB,UAAvB,C","file":"user.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport bcrypt from 'bcrypt-nodejs'\r\n\r\nconst Schema = mongoose.Schema\r\n\r\nconst userSchema = new Schema({\r\n\temail: {\r\n\t\ttype: String,\r\n\t\trequired: true,\r\n\t\tunique: true\r\n\t},\r\n\tpassword: {\r\n\t \ttype: String,\r\n\t\trequired: true\r\n\t}\r\n}, { collection: 'user', timestamps: true } )\r\n\r\nuserSchema.pre('save', function (next) {\r\n\tconst user = this\r\n\t// If user is now yet created\r\n\tif(!user.isModified('password')) return next()\r\n\tbcrypt.hash(user.password, null, null, function (err, hash) {\r\n\t\tif(err) return next(err)\r\n\t\tuser.password = hash\r\n\t\tnext()\r\n\t})\r\n})\r\n\r\nuserSchema.methods.comparePassword = function (pass) {\r\n\tconst user = this\r\n\treturn bcrypt.compareSync(pass, user.password)\r\n}\r\n\r\nexport default mongoose.model('user', userSchema)\r\n"]}