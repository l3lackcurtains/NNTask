{"version":3,"sources":["../../server/utils/auth.js"],"names":["LocalStrategy","Strategy","use","usernameField","passwordField","session","passReqToCallback","req","username","password","done","check","notEmpty","isEmail","isLength","min","errors","validationErrors","messages","forEach","error","push","msg","findOne","email","err","user","success","message","newUser","save","res","_id","createdAt","comparePassword","token","serializeUser","deserializeUser","id"],"mappings":"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","file":"auth.js","sourcesContent":["import passport from 'passport'\r\nimport passportLocal from 'passport-local'\r\nimport User from '../models/user'\r\nimport { createToken } from './index'\r\n\r\nconst LocalStrategy = passportLocal.Strategy\r\n\r\n// Sign Up using Passport Local strategy\r\npassport.use('local.signup', new LocalStrategy({\r\n\tusernameField: 'email',\r\n\tpasswordField: 'password',\r\n\tsession: false,\r\n\tpassReqToCallback: true\r\n},\r\n\t(req, username, password, done) => {\r\n\t\treq.check('email', 'Invalid email').notEmpty().isEmail()\r\n\t\treq.check('password', 'Invalid Password').notEmpty().isLength({ min: 6 })\r\n\t\tconst errors = req.validationErrors()\r\n\t\tif (errors) {\r\n\t\t\tconst messages = []\r\n\t\t\terrors.forEach((error) => {\r\n\t\t\t\tmessages.push(error.msg)\r\n\t\t\t})\r\n\t\t\treturn done(errors)\r\n\t\t}\r\n\t\treturn User.findOne({ email: username }, (err, user) => {\r\n\t\t\tif (err) return done(err)\r\n\t\t\tif (user) return done(null, false, { success: false, message: 'Email Already exists' })\r\n\t\t\tconst newUser = new User()\r\n\t\t\tnewUser.email = username\r\n\t\t\tnewUser.password = password\r\n\t\t\treturn newUser.save((err, res) => {\r\n\t\t\t\tif (err) return done(null, false, { success: false, message: 'error saving user' })\r\n\t\t\t\tconst { email, _id, createdAt } = res\r\n\t\t\t\treturn done(null, { success: true, message: 'successfully Registered', user: { _id, email, createdAt } })\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n))\r\n\r\n// LogIn using Passport Local strategy\r\npassport.use('local', new LocalStrategy({\r\n\tusernameField: 'email',\r\n\tpasswordField: 'password',\r\n\tsession: false,\r\n\tpassReqToCallback: true\r\n},\r\n\t(req, username, password, done) => {\r\n\t\treq.check('email', 'Invalid email').notEmpty().isEmail()\r\n\t\treq.check('password', 'Invalid Password').notEmpty().isLength({ min: 6 })\r\n\t\tconst errors = req.validationErrors()\r\n\t\tif (errors) {\r\n\t\t\tconst messages = []\r\n\t\t\terrors.forEach((error) => {\r\n\t\t\t\tmessages.push(error.msg)\r\n\t\t\t})\r\n\t\t\treturn done(errors)\r\n\t\t}\r\n\t\treturn User.findOne({ email: username }, (err, user) => {\r\n\t\t\tif (err) { return done(err); }\r\n\t\t\tif (!user) {\r\n\t\t\t\treturn done(null, false, { success: false, message: 'Incorrect username.' })\r\n\t\t\t}\r\n\t\t\tif (!user.comparePassword(password)) {\r\n\t\t\t\treturn done(null, false, { success: false, message: 'Incorrect password.' })\r\n\t\t\t}\r\n\t\t\tconst { _id, email, createdAt } = user\r\n\t\t\tconst token = createToken({ _id, email, createdAt })\r\n\t\t\treturn done(null, { success: true, message: 'Successfully Logged In', user: { _id, email, createdAt, token } });\r\n\t\t})\r\n\t}\r\n))\r\n\r\npassport.serializeUser((user, done) => {\r\n\tdone(null, user)\r\n})\r\n\r\npassport.deserializeUser((id, done) => {\r\n\tUser.findOne({\r\n\t\t_id: id\r\n\t}, '-password', (err, user) => {\r\n\t\tdone(err, user)\r\n\t})\r\n})\r\n"]}